To-Do

General
- prepare demo for Shalin
- Look into integration with SciView
- Reach out to Kyle about python integration
- make textboard work the way described in Steve's lab by Fabio. Off until you request them, then their location in space is calculated by your position/view in order to be unobscured and for the text not to be mirrored

Functionality
- add a default file path (rough fix, might want to make more inteligent/useful)
- break apart loadDataset() function
- Rethink colormap calling. 

Issues
- no color for most cell types
	- can be fixed by removing two statements in instancing - debug
- Not issue, but nan cells appear as ######## in excel
- Find a better way record the number of genes in the dataset (currently a global variable and assignment on line 312)
	- currently done with a small if statement - there may be a more efficient way to do this
- Will break with no default dataset. Find a better way to go to default if no datasets are found
- increasing and decreasing size of data: when going from increasing to decreasing, points lag input by one press. Textboards change size with input, points, grow/shrink for one more press before shrinking/growing.

Change-log

Fix notes
- Changed GMB dataset to comma-separated
- Both files now start with index, followed by cell name, n gene expression columns, three coordinate columns, and a one dataset column
- Tabula has 7 gene columsn, GMB has 10 columns
- added new colormap that better encodes gene expression (dark for more expression, down to almost white for no expression)
- commenting 
- commented part of color instancing fixed lack of gradient in color map - unclear what the other line was for - binary color encoding
- Rewriting of csvReader function to be dynamic and allow for datasets with a variable number of genes

14.12.20
- added a generateCylinder function to prevent reused code. Catches invalid dimensions and is not case sensitive.

15.12.20
- gene expression normalization now in a function and called in loadDataset()
- commenting

16.12.20
to-do: 
- color map out of loadDataset()
- "on a related note regarding OpenVR -- this now logs all input events when debug logging is activated, which can be done by setting the system property scenery.LogLevel.OpenVRHMD=debug

changelog:
- placed OpenVRHMD into init()
- changed keybindings to directly reference controller key instead of keyboard key map
- changed scenery version reference in pom 
- 


- gitter notes todo:
1)
- Every few times I run, I get a crash with a java.lang.OutOfMemryError. Rerunning it fixes it so not a big issue:

 add -Xmx8g in the VM options for the run configuration, these things need more memory than what's the default

2)
 - you are binding only to the inputHandler, if you want the behavior to execute on key presses and on the controllers, addBehaviour and addKeybinding needs to be called on both

stable: 80d656d
 hey @ljjh20! check out scenery version 69f4b99, which might have a potential fix for the lag behaviour. let me know if that fixes it. with the 25fps issue, please also try using a lower radius for your spheres in case that they are very crowded, if there's a lot of them drawn on top of each other, that also negatively affects performance. how many data points do you have in the scene there? additionally, it might also help splitting up all the points between several master objects, in case there's a lot of them (more than 50-100k)

 yeah split at 10k and then it was fairly smooth up to 1M on my laptop

References to v:
- reload()
- resetVisibility()
- fetchCenterOfMass()
- var declaration
- instancing
- in viz class (size, laser mark, delete)

- figure out naming. Might want to first figure out how many masters I will need and then create them all in a for loop
- should be reusable for different sized datasets of course
- 